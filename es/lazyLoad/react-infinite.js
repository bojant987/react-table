var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import isEqual from 'lodash.isequal';

import infiniteHelpers from './utils/infiniteHelpers';

var timeScrollStateLastsForAfterUserScrolls = 150;

var Infinite = function (_React$Component) {
	_inherits(Infinite, _React$Component);

	function Infinite(props) {
		_classCallCheck(this, Infinite);

		var _this = _possibleConstructorReturn(this, (Infinite.__proto__ || Object.getPrototypeOf(Infinite)).call(this, props));

		_initialiseProps.call(_this);

		var nextInternalState = _this.recomputeInternalStateFromProps(props);

		_this.computedProps = nextInternalState.computedProps;
		_this.utils = nextInternalState.utils;

		var state = nextInternalState.newState;
		state.scrollTimeout = undefined;
		state.isScrolling = false;

		_this.state = state;
		return _this;
	}

	_createClass(Infinite, [{
		key: 'componentWillReceiveProps',


		// shouldComponentUpdate(nextProps, nextState) {
		// 	console.log(!isEqual(this.props.children, nextProps.children));
		// 	return this.props.containerHeight !== nextProps.containerHeight
		// 		|| this.props.elementHeight !== nextProps.elementHeight
		// 		|| !isEqual(this.props.data, nextProps.data)
		// 		// || !isEqual(this.props.children, nextProps.children)
		// 		|| !isEqual(this.state, nextState);
		// }

		value: function componentWillReceiveProps(nextProps) {
			var nextInternalState = this.recomputeInternalStateFromProps(nextProps);

			this.computedProps = nextInternalState.computedProps;
			this.utils = nextInternalState.utils;

			this.setState(nextInternalState.newState);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var displayables = void 0;
			if (this.state.dataLength > 1) {
				displayables = this.computedProps.children.slice(this.state.displayIndexStart, this.state.displayIndexEnd + 1);
			} else {
				displayables = this.computedProps.children;
			}

			var infiniteScrollStyles = {};
			if (this.state.isScrolling) {
				infiniteScrollStyles.pointerEvents = 'none';
			}

			var topSpacerHeight = this.state.infiniteComputer.getTopSpacerHeight(this.state.displayIndexStart),
			    bottomSpacerHeight = this.state.infiniteComputer.getBottomSpacerHeight(this.state.displayIndexEnd);

			// topSpacer and bottomSpacer take up the amount of space that the
			// rendered elements would have taken up otherwise
			return React.createElement(
				'div',
				{
					className: this.computedProps.className,
					ref: function ref(c) {
						_this2.scrollable = c;
					},
					style: this.utils.buildScrollableStyle(),
					onScroll: this.utils.nodeScrollListener
				},
				React.createElement(
					'div',
					{
						ref: function ref(c) {
							_this2.smoothScrollingWrapper = c;
						},
						style: infiniteScrollStyles
					},
					React.createElement('div', {
						ref: function ref(c) {
							_this2.topSpacer = c;
						},
						style: infiniteHelpers.buildHeightStyle(topSpacerHeight)
					}),
					displayables,
					React.createElement('div', {
						ref: function ref(c) {
							_this2.bottomSpacer = c;
						},
						style: infiniteHelpers.buildHeightStyle(bottomSpacerHeight)
					})
				)
			);
		}
	}]);

	return Infinite;
}(React.Component);

Infinite.propTypes = {
	children: PropTypes.any,
	data: PropTypes.array,
	elementHeight: PropTypes.number.isRequired,
	containerHeight: PropTypes.number.isRequired,
	className: PropTypes.string,
	styles: PropTypes.shape({
		scrollableStyle: PropTypes.object
	}).isRequired,
	onVisibleChange: PropTypes.func
};
Infinite.defaultProps = {
	className: '',
	styles: {},
	onVisibleChange: function onVisibleChange() {}
};

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.generateComputedUtilityFunctions = function () {
		var utilities = {};

		utilities.nodeScrollListener = _this3.infiniteHandleScroll;
		utilities.getScrollTop = function () {
			return _this3.scrollable ? _this3.scrollable.scrollTop : 0;
		};

		utilities.setScrollTop = function (top) {
			if (_this3.scrollable) {
				_this3.scrollable.scrollTop = top;
			}
		};
		utilities.scrollShouldBeIgnored = function (event) {
			return event.target !== _this3.scrollable;
		};

		utilities.buildScrollableStyle = function () {
			return Object.assign({}, {
				height: _this3.computedProps.containerHeight,
				overflowX: 'hidden',
				overflowY: 'scroll',
				WebkitOverflowScrolling: 'touch'
			}, _this3.computedProps.styles.scrollableStyle || {});
		};

		return utilities;
	};

	this.recomputeInternalStateFromProps = function (props) {
		var computedProps = infiniteHelpers.generateComputedProps(props);
		var utils = _this3.generateComputedUtilityFunctions();

		var newState = {};

		newState.dataLength = computedProps.data.length;
		newState.infiniteComputer = infiniteHelpers.createInfiniteComputer(computedProps.elementHeight, computedProps.data);

		newState.preloadBatchSize = computedProps.preloadBatchSize;
		newState.preloadAdditionalHeight = computedProps.preloadAdditionalHeight;

		newState = Object.assign(newState, infiniteHelpers.recomputeApertureStateFromOptionsAndScrollTop(newState, utils.getScrollTop()));

		return {
			computedProps: computedProps,
			utils: utils,
			newState: newState
		};
	};

	this.infiniteHandleScroll = function (e) {
		if (_this3.utils.scrollShouldBeIgnored(e)) {
			return;
		}

		_this3.handleScroll(_this3.utils.getScrollTop());
	};

	this.manageScrollTimeouts = function () {
		// Maintains a series of timeouts to set this.state.isScrolling
		// to be true when the element is scrolling.

		if (_this3.state.scrollTimeout) {
			clearTimeout(_this3.state.scrollTimeout);
		}

		var that = _this3,
		    scrollTimeout = setTimeout(function () {
			that.setState({
				isScrolling: false,
				scrollTimeout: undefined
			});
		}, timeScrollStateLastsForAfterUserScrolls);

		_this3.setState({
			isScrolling: true,
			scrollTimeout: scrollTimeout
		});
	};

	this.handleScroll = function (scrollTop) {
		_this3.manageScrollTimeouts();

		var newApertureState = infiniteHelpers.recomputeApertureStateFromOptionsAndScrollTop(_this3.state, scrollTop);
		// this.props.onVisibleChange(newApertureState);
		_this3.setState(Object.assign({}, newApertureState));
	};
};

export default Infinite;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,