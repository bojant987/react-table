function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import ConstantInfiniteComputer from '../computers/constantInfiniteComputer.js';
import scaleEnum from './scaleEnum';

function createInfiniteComputer(elementHeight, data) {
	var computer = void 0;
	var dataLength = data.length;

	// This should be guaranteed by checkProps
	computer = new ConstantInfiniteComputer(elementHeight, dataLength);

	return computer;
}

// Given the scrollTop of the container, computes the state the
// component should be in. The goal is to abstract all of this
// from any actual representation in the DOM.
// The window is the block with any preloadAdditionalHeight
// added to it.
function recomputeApertureStateFromOptionsAndScrollTop(_ref, scrollTop) {
	var preloadBatchSize = _ref.preloadBatchSize,
	    preloadAdditionalHeight = _ref.preloadAdditionalHeight,
	    infiniteComputer = _ref.infiniteComputer;

	var blockNumber = preloadBatchSize === 0 ? 0 : Math.floor(scrollTop / preloadBatchSize),
	    blockStart = preloadBatchSize * blockNumber,
	    blockEnd = blockStart + preloadBatchSize,
	    apertureTop = Math.max(0, blockStart - preloadAdditionalHeight),
	    apertureBottom = Math.min(infiniteComputer.getTotalScrollableHeight(), blockEnd + preloadAdditionalHeight);

	return {
		displayIndexStart: infiniteComputer.getDisplayIndexStart(apertureTop),
		displayIndexEnd: infiniteComputer.getDisplayIndexEnd(apertureBottom)
	};
}

function generateComputedProps(props) {
	// These are extracted so their type definitions do not conflict.
	var containerHeight = props.containerHeight,
	    oldProps = _objectWithoutProperties(props, ['containerHeight']);

	var newProps = {};
	newProps.containerHeight = containerHeight;

	var batchSize = {
		type: scaleEnum.CONTAINER_HEIGHT_SCALE_FACTOR,
		amount: 0.5
	};

	newProps.preloadBatchSize = newProps.containerHeight * batchSize.amount;

	var additionalHeight = {
		type: scaleEnum.CONTAINER_HEIGHT_SCALE_FACTOR,
		amount: 1
	};

	newProps.preloadAdditionalHeight = newProps.containerHeight * additionalHeight.amount;

	return Object.assign(oldProps, newProps);
}

function buildHeightStyle(height) {
	return {
		width: '100%',
		height: Math.ceil(height)
	};
}

export default {
	createInfiniteComputer: createInfiniteComputer,
	recomputeApertureStateFromOptionsAndScrollTop: recomputeApertureStateFromOptionsAndScrollTop,
	generateComputedProps: generateComputedProps,
	buildHeightStyle: buildHeightStyle
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXp5TG9hZC91dGlscy9pbmZpbml0ZUhlbHBlcnMuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJDb25zdGFudEluZmluaXRlQ29tcHV0ZXIiLCJzY2FsZUVudW0iLCJjcmVhdGVJbmZpbml0ZUNvbXB1dGVyIiwiZWxlbWVudEhlaWdodCIsImRhdGEiLCJjb21wdXRlciIsImRhdGFMZW5ndGgiLCJsZW5ndGgiLCJyZWNvbXB1dGVBcGVydHVyZVN0YXRlRnJvbU9wdGlvbnNBbmRTY3JvbGxUb3AiLCJzY3JvbGxUb3AiLCJwcmVsb2FkQmF0Y2hTaXplIiwicHJlbG9hZEFkZGl0aW9uYWxIZWlnaHQiLCJpbmZpbml0ZUNvbXB1dGVyIiwiYmxvY2tOdW1iZXIiLCJNYXRoIiwiZmxvb3IiLCJibG9ja1N0YXJ0IiwiYmxvY2tFbmQiLCJhcGVydHVyZVRvcCIsIm1heCIsImFwZXJ0dXJlQm90dG9tIiwibWluIiwiZ2V0VG90YWxTY3JvbGxhYmxlSGVpZ2h0IiwiZGlzcGxheUluZGV4U3RhcnQiLCJnZXREaXNwbGF5SW5kZXhTdGFydCIsImRpc3BsYXlJbmRleEVuZCIsImdldERpc3BsYXlJbmRleEVuZCIsImdlbmVyYXRlQ29tcHV0ZWRQcm9wcyIsInByb3BzIiwiY29udGFpbmVySGVpZ2h0Iiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsImJhdGNoU2l6ZSIsInR5cGUiLCJDT05UQUlORVJfSEVJR0hUX1NDQUxFX0ZBQ1RPUiIsImFtb3VudCIsImFkZGl0aW9uYWxIZWlnaHQiLCJPYmplY3QiLCJhc3NpZ24iLCJidWlsZEhlaWdodFN0eWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJjZWlsIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQywwQ0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGFBQXRCOztBQUVBLFNBQVNDLHNCQUFULENBQWdDQyxhQUFoQyxFQUErQ0MsSUFBL0MsRUFBcUQ7QUFDcEQsS0FBSUMsaUJBQUo7QUFDQSxLQUFNQyxhQUFhRixLQUFLRyxNQUF4Qjs7QUFFQTtBQUNBRixZQUFXLElBQUlMLHdCQUFKLENBQTZCRyxhQUE3QixFQUE0Q0csVUFBNUMsQ0FBWDs7QUFFQSxRQUFPRCxRQUFQO0FBQ0E7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNHLDZDQUFULE9BRUNDLFNBRkQsRUFHRTtBQUFBLEtBRkNDLGdCQUVELFFBRkNBLGdCQUVEO0FBQUEsS0FGbUJDLHVCQUVuQixRQUZtQkEsdUJBRW5CO0FBQUEsS0FGNENDLGdCQUU1QyxRQUY0Q0EsZ0JBRTVDOztBQUNELEtBQUlDLGNBQWNILHFCQUFxQixDQUFyQixHQUF5QixDQUF6QixHQUE2QkksS0FBS0MsS0FBTCxDQUFXTixZQUFZQyxnQkFBdkIsQ0FBL0M7QUFBQSxLQUNDTSxhQUFhTixtQkFBbUJHLFdBRGpDO0FBQUEsS0FFQ0ksV0FBV0QsYUFBYU4sZ0JBRnpCO0FBQUEsS0FHQ1EsY0FBY0osS0FBS0ssR0FBTCxDQUFTLENBQVQsRUFBWUgsYUFBYUwsdUJBQXpCLENBSGY7QUFBQSxLQUlDUyxpQkFBaUJOLEtBQUtPLEdBQUwsQ0FBU1QsaUJBQWlCVSx3QkFBakIsRUFBVCxFQUFzREwsV0FBV04sdUJBQWpFLENBSmxCOztBQU1BLFFBQU87QUFDTlkscUJBQW1CWCxpQkFBaUJZLG9CQUFqQixDQUFzQ04sV0FBdEMsQ0FEYjtBQUVOTyxtQkFBaUJiLGlCQUFpQmMsa0JBQWpCLENBQW9DTixjQUFwQztBQUZYLEVBQVA7QUFJQTs7QUFFRCxTQUFTTyxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0M7QUFDckM7QUFEcUMsS0FHcENDLGVBSG9DLEdBS2pDRCxLQUxpQyxDQUdwQ0MsZUFIb0M7QUFBQSxLQUlqQ0MsUUFKaUMsNEJBS2pDRixLQUxpQzs7QUFPckMsS0FBSUcsV0FBVyxFQUFmO0FBQ0FBLFVBQVNGLGVBQVQsR0FBMkJBLGVBQTNCOztBQUVBLEtBQUlHLFlBQVk7QUFDZkMsUUFBTWhDLFVBQVVpQyw2QkFERDtBQUVmQyxVQUFRO0FBRk8sRUFBaEI7O0FBS0FKLFVBQVNyQixnQkFBVCxHQUE0QnFCLFNBQVNGLGVBQVQsR0FBMkJHLFVBQVVHLE1BQWpFOztBQUVBLEtBQUlDLG1CQUFtQjtBQUN0QkgsUUFBTWhDLFVBQVVpQyw2QkFETTtBQUV0QkMsVUFBUTtBQUZjLEVBQXZCOztBQUtBSixVQUFTcEIsdUJBQVQsR0FBbUNvQixTQUFTRixlQUFULEdBQTJCTyxpQkFBaUJELE1BQS9FOztBQUVBLFFBQU9FLE9BQU9DLE1BQVAsQ0FBY1IsUUFBZCxFQUF3QkMsUUFBeEIsQ0FBUDtBQUNBOztBQUVELFNBQVNRLGdCQUFULENBQTBCQyxNQUExQixFQUFrQztBQUNqQyxRQUFPO0FBQ05DLFNBQU8sTUFERDtBQUVORCxVQUFRMUIsS0FBSzRCLElBQUwsQ0FBVUYsTUFBVjtBQUZGLEVBQVA7QUFJQTs7QUFFRCxlQUFlO0FBQ2R0QywrQ0FEYztBQUVkTSw2RkFGYztBQUdkbUIsNkNBSGM7QUFJZFk7QUFKYyxDQUFmIiwiZmlsZSI6ImluZmluaXRlSGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ29uc3RhbnRJbmZpbml0ZUNvbXB1dGVyIGZyb20gJy4uL2NvbXB1dGVycy9jb25zdGFudEluZmluaXRlQ29tcHV0ZXIuanMnO1xuaW1wb3J0IHNjYWxlRW51bSBmcm9tICcuL3NjYWxlRW51bSc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUluZmluaXRlQ29tcHV0ZXIoZWxlbWVudEhlaWdodCwgZGF0YSkge1xuXHRsZXQgY29tcHV0ZXI7XG5cdGNvbnN0IGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuXHQvLyBUaGlzIHNob3VsZCBiZSBndWFyYW50ZWVkIGJ5IGNoZWNrUHJvcHNcblx0Y29tcHV0ZXIgPSBuZXcgQ29uc3RhbnRJbmZpbml0ZUNvbXB1dGVyKGVsZW1lbnRIZWlnaHQsIGRhdGFMZW5ndGgpO1xuXG5cdHJldHVybiBjb21wdXRlcjtcbn1cblxuLy8gR2l2ZW4gdGhlIHNjcm9sbFRvcCBvZiB0aGUgY29udGFpbmVyLCBjb21wdXRlcyB0aGUgc3RhdGUgdGhlXG4vLyBjb21wb25lbnQgc2hvdWxkIGJlIGluLiBUaGUgZ29hbCBpcyB0byBhYnN0cmFjdCBhbGwgb2YgdGhpc1xuLy8gZnJvbSBhbnkgYWN0dWFsIHJlcHJlc2VudGF0aW9uIGluIHRoZSBET00uXG4vLyBUaGUgd2luZG93IGlzIHRoZSBibG9jayB3aXRoIGFueSBwcmVsb2FkQWRkaXRpb25hbEhlaWdodFxuLy8gYWRkZWQgdG8gaXQuXG5mdW5jdGlvbiByZWNvbXB1dGVBcGVydHVyZVN0YXRlRnJvbU9wdGlvbnNBbmRTY3JvbGxUb3AoXG5cdHsgcHJlbG9hZEJhdGNoU2l6ZSwgcHJlbG9hZEFkZGl0aW9uYWxIZWlnaHQsIGluZmluaXRlQ29tcHV0ZXIgfSxcblx0c2Nyb2xsVG9wLFxuKSB7XG5cdGxldCBibG9ja051bWJlciA9IHByZWxvYWRCYXRjaFNpemUgPT09IDAgPyAwIDogTWF0aC5mbG9vcihzY3JvbGxUb3AgLyBwcmVsb2FkQmF0Y2hTaXplKSxcblx0XHRibG9ja1N0YXJ0ID0gcHJlbG9hZEJhdGNoU2l6ZSAqIGJsb2NrTnVtYmVyLFxuXHRcdGJsb2NrRW5kID0gYmxvY2tTdGFydCArIHByZWxvYWRCYXRjaFNpemUsXG5cdFx0YXBlcnR1cmVUb3AgPSBNYXRoLm1heCgwLCBibG9ja1N0YXJ0IC0gcHJlbG9hZEFkZGl0aW9uYWxIZWlnaHQpLFxuXHRcdGFwZXJ0dXJlQm90dG9tID0gTWF0aC5taW4oaW5maW5pdGVDb21wdXRlci5nZXRUb3RhbFNjcm9sbGFibGVIZWlnaHQoKSwgYmxvY2tFbmQgKyBwcmVsb2FkQWRkaXRpb25hbEhlaWdodCk7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwbGF5SW5kZXhTdGFydDogaW5maW5pdGVDb21wdXRlci5nZXREaXNwbGF5SW5kZXhTdGFydChhcGVydHVyZVRvcCksXG5cdFx0ZGlzcGxheUluZGV4RW5kOiBpbmZpbml0ZUNvbXB1dGVyLmdldERpc3BsYXlJbmRleEVuZChhcGVydHVyZUJvdHRvbSksXG5cdH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29tcHV0ZWRQcm9wcyhwcm9wcykge1xuXHQvLyBUaGVzZSBhcmUgZXh0cmFjdGVkIHNvIHRoZWlyIHR5cGUgZGVmaW5pdGlvbnMgZG8gbm90IGNvbmZsaWN0LlxuXHRsZXQge1xuXHRcdGNvbnRhaW5lckhlaWdodCxcblx0XHQuLi5vbGRQcm9wc1xuXHR9ID0gcHJvcHM7XG5cblx0bGV0IG5ld1Byb3BzID0ge307XG5cdG5ld1Byb3BzLmNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lckhlaWdodDtcblxuXHRsZXQgYmF0Y2hTaXplID0ge1xuXHRcdHR5cGU6IHNjYWxlRW51bS5DT05UQUlORVJfSEVJR0hUX1NDQUxFX0ZBQ1RPUixcblx0XHRhbW91bnQ6IDAuNSxcblx0fTtcblxuXHRuZXdQcm9wcy5wcmVsb2FkQmF0Y2hTaXplID0gbmV3UHJvcHMuY29udGFpbmVySGVpZ2h0ICogYmF0Y2hTaXplLmFtb3VudDtcblxuXHRsZXQgYWRkaXRpb25hbEhlaWdodCA9IHtcblx0XHR0eXBlOiBzY2FsZUVudW0uQ09OVEFJTkVSX0hFSUdIVF9TQ0FMRV9GQUNUT1IsXG5cdFx0YW1vdW50OiAxLFxuXHR9O1xuXG5cdG5ld1Byb3BzLnByZWxvYWRBZGRpdGlvbmFsSGVpZ2h0ID0gbmV3UHJvcHMuY29udGFpbmVySGVpZ2h0ICogYWRkaXRpb25hbEhlaWdodC5hbW91bnQ7XG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24ob2xkUHJvcHMsIG5ld1Byb3BzKTtcbn1cblxuZnVuY3Rpb24gYnVpbGRIZWlnaHRTdHlsZShoZWlnaHQpIHtcblx0cmV0dXJuIHtcblx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdGhlaWdodDogTWF0aC5jZWlsKGhlaWdodCksXG5cdH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0Y3JlYXRlSW5maW5pdGVDb21wdXRlcixcblx0cmVjb21wdXRlQXBlcnR1cmVTdGF0ZUZyb21PcHRpb25zQW5kU2Nyb2xsVG9wLFxuXHRnZW5lcmF0ZUNvbXB1dGVkUHJvcHMsXG5cdGJ1aWxkSGVpZ2h0U3R5bGUsXG59O1xuIl19