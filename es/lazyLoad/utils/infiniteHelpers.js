function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import ConstantInfiniteComputer from '../computers/constantInfiniteComputer.js';
import scaleEnum from './scaleEnum';

function createInfiniteComputer(elementHeight, data) {
	var computer = void 0;
	var dataLength = data.length;

	// This should be guaranteed by checkProps
	computer = new ConstantInfiniteComputer(elementHeight, dataLength);

	return computer;
}

// Given the scrollTop of the container, computes the state the
// component should be in. The goal is to abstract all of this
// from any actual representation in the DOM.
// The window is the block with any preloadAdditionalHeight
// added to it.
function recomputeApertureStateFromOptionsAndScrollTop(_ref, scrollTop) {
	var preloadBatchSize = _ref.preloadBatchSize,
	    preloadAdditionalHeight = _ref.preloadAdditionalHeight,
	    infiniteComputer = _ref.infiniteComputer;

	console.log('IC', infiniteComputer);
	var blockNumber = preloadBatchSize === 0 ? 0 : Math.floor(scrollTop / preloadBatchSize);
	var blockStart = preloadBatchSize * blockNumber;
	var blockEnd = blockStart + preloadBatchSize;
	var apertureTop = Math.max(0, blockStart - preloadAdditionalHeight);
	var apertureBottom = Math.min(infiniteComputer.getTotalScrollableHeight(), blockEnd + preloadAdditionalHeight);

	return {
		displayIndexStart: infiniteComputer.getDisplayIndexStart(apertureTop),
		displayIndexEnd: infiniteComputer.getDisplayIndexEnd(apertureBottom)
	};
}

function generateInfiniteProps(props) {
	// These are extracted so their type definitions do not conflict.
	var containerHeight = props.containerHeight,
	    oldProps = _objectWithoutProperties(props, ['containerHeight']);

	var newProps = {};
	newProps.containerHeight = containerHeight;

	var batchSize = {
		type: scaleEnum.CONTAINER_HEIGHT_SCALE_FACTOR,
		amount: 0.5
	};

	newProps.preloadBatchSize = newProps.containerHeight * batchSize.amount;

	var additionalHeight = {
		type: scaleEnum.CONTAINER_HEIGHT_SCALE_FACTOR,
		amount: 1
	};

	newProps.preloadAdditionalHeight = newProps.containerHeight * additionalHeight.amount;

	return Object.assign(oldProps, newProps);
}

function buildHeightStyle(height) {
	return {
		width: '100%',
		height: Math.ceil(height)
	};
}

export default {
	createInfiniteComputer: createInfiniteComputer,
	recomputeApertureStateFromOptionsAndScrollTop: recomputeApertureStateFromOptionsAndScrollTop,
	generateInfiniteProps: generateInfiniteProps,
	buildHeightStyle: buildHeightStyle
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXp5TG9hZC91dGlscy9pbmZpbml0ZUhlbHBlcnMuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJDb25zdGFudEluZmluaXRlQ29tcHV0ZXIiLCJzY2FsZUVudW0iLCJjcmVhdGVJbmZpbml0ZUNvbXB1dGVyIiwiZWxlbWVudEhlaWdodCIsImRhdGEiLCJjb21wdXRlciIsImRhdGFMZW5ndGgiLCJsZW5ndGgiLCJyZWNvbXB1dGVBcGVydHVyZVN0YXRlRnJvbU9wdGlvbnNBbmRTY3JvbGxUb3AiLCJzY3JvbGxUb3AiLCJwcmVsb2FkQmF0Y2hTaXplIiwicHJlbG9hZEFkZGl0aW9uYWxIZWlnaHQiLCJpbmZpbml0ZUNvbXB1dGVyIiwiY29uc29sZSIsImxvZyIsImJsb2NrTnVtYmVyIiwiTWF0aCIsImZsb29yIiwiYmxvY2tTdGFydCIsImJsb2NrRW5kIiwiYXBlcnR1cmVUb3AiLCJtYXgiLCJhcGVydHVyZUJvdHRvbSIsIm1pbiIsImdldFRvdGFsU2Nyb2xsYWJsZUhlaWdodCIsImRpc3BsYXlJbmRleFN0YXJ0IiwiZ2V0RGlzcGxheUluZGV4U3RhcnQiLCJkaXNwbGF5SW5kZXhFbmQiLCJnZXREaXNwbGF5SW5kZXhFbmQiLCJnZW5lcmF0ZUluZmluaXRlUHJvcHMiLCJwcm9wcyIsImNvbnRhaW5lckhlaWdodCIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJiYXRjaFNpemUiLCJ0eXBlIiwiQ09OVEFJTkVSX0hFSUdIVF9TQ0FMRV9GQUNUT1IiLCJhbW91bnQiLCJhZGRpdGlvbmFsSGVpZ2h0IiwiT2JqZWN0IiwiYXNzaWduIiwiYnVpbGRIZWlnaHRTdHlsZSIsImhlaWdodCIsIndpZHRoIiwiY2VpbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0Msd0JBQVAsTUFBcUMsMENBQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0Qjs7QUFFQSxTQUFTQyxzQkFBVCxDQUFnQ0MsYUFBaEMsRUFBK0NDLElBQS9DLEVBQXFEO0FBQ3BELEtBQUlDLGlCQUFKO0FBQ0EsS0FBTUMsYUFBYUYsS0FBS0csTUFBeEI7O0FBRUE7QUFDQUYsWUFBVyxJQUFJTCx3QkFBSixDQUE2QkcsYUFBN0IsRUFBNENHLFVBQTVDLENBQVg7O0FBRUEsUUFBT0QsUUFBUDtBQUNBOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyw2Q0FBVCxPQUVFQyxTQUZGLEVBR0U7QUFBQSxLQUZFQyxnQkFFRixRQUZFQSxnQkFFRjtBQUFBLEtBRm9CQyx1QkFFcEIsUUFGb0JBLHVCQUVwQjtBQUFBLEtBRjZDQyxnQkFFN0MsUUFGNkNBLGdCQUU3Qzs7QUFDQUMsU0FBUUMsR0FBUixDQUFZLElBQVosRUFBa0JGLGdCQUFsQjtBQUNBLEtBQU1HLGNBQWNMLHFCQUFxQixDQUFyQixHQUF5QixDQUF6QixHQUE2Qk0sS0FBS0MsS0FBTCxDQUFXUixZQUFZQyxnQkFBdkIsQ0FBakQ7QUFDQSxLQUFNUSxhQUFhUixtQkFBbUJLLFdBQXRDO0FBQ0EsS0FBTUksV0FBV0QsYUFBYVIsZ0JBQTlCO0FBQ0EsS0FBTVUsY0FBY0osS0FBS0ssR0FBTCxDQUFTLENBQVQsRUFBWUgsYUFBYVAsdUJBQXpCLENBQXBCO0FBQ0EsS0FBTVcsaUJBQWlCTixLQUFLTyxHQUFMLENBQ3JCWCxpQkFBaUJZLHdCQUFqQixFQURxQixFQUN3QkwsV0FBV1IsdUJBRG5DLENBQXZCOztBQUlELFFBQU87QUFDTmMscUJBQW1CYixpQkFBaUJjLG9CQUFqQixDQUFzQ04sV0FBdEMsQ0FEYjtBQUVOTyxtQkFBaUJmLGlCQUFpQmdCLGtCQUFqQixDQUFvQ04sY0FBcEM7QUFGWCxFQUFQO0FBSUE7O0FBRUQsU0FBU08scUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDO0FBQ3JDO0FBRHFDLEtBR3BDQyxlQUhvQyxHQUtqQ0QsS0FMaUMsQ0FHcENDLGVBSG9DO0FBQUEsS0FJakNDLFFBSmlDLDRCQUtqQ0YsS0FMaUM7O0FBT3JDLEtBQUlHLFdBQVcsRUFBZjtBQUNBQSxVQUFTRixlQUFULEdBQTJCQSxlQUEzQjs7QUFFQSxLQUFJRyxZQUFZO0FBQ2ZDLFFBQU1sQyxVQUFVbUMsNkJBREQ7QUFFZkMsVUFBUTtBQUZPLEVBQWhCOztBQUtBSixVQUFTdkIsZ0JBQVQsR0FBNEJ1QixTQUFTRixlQUFULEdBQTJCRyxVQUFVRyxNQUFqRTs7QUFFQSxLQUFJQyxtQkFBbUI7QUFDdEJILFFBQU1sQyxVQUFVbUMsNkJBRE07QUFFdEJDLFVBQVE7QUFGYyxFQUF2Qjs7QUFLQUosVUFBU3RCLHVCQUFULEdBQW1Dc0IsU0FBU0YsZUFBVCxHQUEyQk8saUJBQWlCRCxNQUEvRTs7QUFFQSxRQUFPRSxPQUFPQyxNQUFQLENBQWNSLFFBQWQsRUFBd0JDLFFBQXhCLENBQVA7QUFDQTs7QUFFRCxTQUFTUSxnQkFBVCxDQUEwQkMsTUFBMUIsRUFBa0M7QUFDakMsUUFBTztBQUNOQyxTQUFPLE1BREQ7QUFFTkQsVUFBUTFCLEtBQUs0QixJQUFMLENBQVVGLE1BQVY7QUFGRixFQUFQO0FBSUE7O0FBRUQsZUFBZTtBQUNkeEMsK0NBRGM7QUFFZE0sNkZBRmM7QUFHYnFCLDZDQUhhO0FBSWRZO0FBSmMsQ0FBZiIsImZpbGUiOiJpbmZpbml0ZUhlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENvbnN0YW50SW5maW5pdGVDb21wdXRlciBmcm9tICcuLi9jb21wdXRlcnMvY29uc3RhbnRJbmZpbml0ZUNvbXB1dGVyLmpzJztcbmltcG9ydCBzY2FsZUVudW0gZnJvbSAnLi9zY2FsZUVudW0nO1xuXG5mdW5jdGlvbiBjcmVhdGVJbmZpbml0ZUNvbXB1dGVyKGVsZW1lbnRIZWlnaHQsIGRhdGEpIHtcblx0bGV0IGNvbXB1dGVyO1xuXHRjb25zdCBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cblx0Ly8gVGhpcyBzaG91bGQgYmUgZ3VhcmFudGVlZCBieSBjaGVja1Byb3BzXG5cdGNvbXB1dGVyID0gbmV3IENvbnN0YW50SW5maW5pdGVDb21wdXRlcihlbGVtZW50SGVpZ2h0LCBkYXRhTGVuZ3RoKTtcblxuXHRyZXR1cm4gY29tcHV0ZXI7XG59XG5cbi8vIEdpdmVuIHRoZSBzY3JvbGxUb3Agb2YgdGhlIGNvbnRhaW5lciwgY29tcHV0ZXMgdGhlIHN0YXRlIHRoZVxuLy8gY29tcG9uZW50IHNob3VsZCBiZSBpbi4gVGhlIGdvYWwgaXMgdG8gYWJzdHJhY3QgYWxsIG9mIHRoaXNcbi8vIGZyb20gYW55IGFjdHVhbCByZXByZXNlbnRhdGlvbiBpbiB0aGUgRE9NLlxuLy8gVGhlIHdpbmRvdyBpcyB0aGUgYmxvY2sgd2l0aCBhbnkgcHJlbG9hZEFkZGl0aW9uYWxIZWlnaHRcbi8vIGFkZGVkIHRvIGl0LlxuZnVuY3Rpb24gcmVjb21wdXRlQXBlcnR1cmVTdGF0ZUZyb21PcHRpb25zQW5kU2Nyb2xsVG9wKFxuICB7IHByZWxvYWRCYXRjaFNpemUsIHByZWxvYWRBZGRpdGlvbmFsSGVpZ2h0LCBpbmZpbml0ZUNvbXB1dGVyIH0sXG4gIHNjcm9sbFRvcFxuKSB7XG4gIGNvbnNvbGUubG9nKCdJQycsIGluZmluaXRlQ29tcHV0ZXIpO1xuICBjb25zdCBibG9ja051bWJlciA9IHByZWxvYWRCYXRjaFNpemUgPT09IDAgPyAwIDogTWF0aC5mbG9vcihzY3JvbGxUb3AgLyBwcmVsb2FkQmF0Y2hTaXplKVxuICBjb25zdCBibG9ja1N0YXJ0ID0gcHJlbG9hZEJhdGNoU2l6ZSAqIGJsb2NrTnVtYmVyXG4gIGNvbnN0IGJsb2NrRW5kID0gYmxvY2tTdGFydCArIHByZWxvYWRCYXRjaFNpemVcbiAgY29uc3QgYXBlcnR1cmVUb3AgPSBNYXRoLm1heCgwLCBibG9ja1N0YXJ0IC0gcHJlbG9hZEFkZGl0aW9uYWxIZWlnaHQpXG4gIGNvbnN0IGFwZXJ0dXJlQm90dG9tID0gTWF0aC5taW4oXG4gICAgaW5maW5pdGVDb21wdXRlci5nZXRUb3RhbFNjcm9sbGFibGVIZWlnaHQoKSwgYmxvY2tFbmQgKyBwcmVsb2FkQWRkaXRpb25hbEhlaWdodFxuICApXG5cblx0cmV0dXJuIHtcblx0XHRkaXNwbGF5SW5kZXhTdGFydDogaW5maW5pdGVDb21wdXRlci5nZXREaXNwbGF5SW5kZXhTdGFydChhcGVydHVyZVRvcCksXG5cdFx0ZGlzcGxheUluZGV4RW5kOiBpbmZpbml0ZUNvbXB1dGVyLmdldERpc3BsYXlJbmRleEVuZChhcGVydHVyZUJvdHRvbSksXG5cdH07XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSW5maW5pdGVQcm9wcyhwcm9wcykge1xuXHQvLyBUaGVzZSBhcmUgZXh0cmFjdGVkIHNvIHRoZWlyIHR5cGUgZGVmaW5pdGlvbnMgZG8gbm90IGNvbmZsaWN0LlxuXHRsZXQge1xuXHRcdGNvbnRhaW5lckhlaWdodCxcblx0XHQuLi5vbGRQcm9wc1xuXHR9ID0gcHJvcHM7XG5cblx0bGV0IG5ld1Byb3BzID0ge307XG5cdG5ld1Byb3BzLmNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lckhlaWdodDtcblxuXHRsZXQgYmF0Y2hTaXplID0ge1xuXHRcdHR5cGU6IHNjYWxlRW51bS5DT05UQUlORVJfSEVJR0hUX1NDQUxFX0ZBQ1RPUixcblx0XHRhbW91bnQ6IDAuNSxcblx0fTtcblxuXHRuZXdQcm9wcy5wcmVsb2FkQmF0Y2hTaXplID0gbmV3UHJvcHMuY29udGFpbmVySGVpZ2h0ICogYmF0Y2hTaXplLmFtb3VudDtcblxuXHRsZXQgYWRkaXRpb25hbEhlaWdodCA9IHtcblx0XHR0eXBlOiBzY2FsZUVudW0uQ09OVEFJTkVSX0hFSUdIVF9TQ0FMRV9GQUNUT1IsXG5cdFx0YW1vdW50OiAxLFxuXHR9O1xuXG5cdG5ld1Byb3BzLnByZWxvYWRBZGRpdGlvbmFsSGVpZ2h0ID0gbmV3UHJvcHMuY29udGFpbmVySGVpZ2h0ICogYWRkaXRpb25hbEhlaWdodC5hbW91bnQ7XG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24ob2xkUHJvcHMsIG5ld1Byb3BzKTtcbn1cblxuZnVuY3Rpb24gYnVpbGRIZWlnaHRTdHlsZShoZWlnaHQpIHtcblx0cmV0dXJuIHtcblx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdGhlaWdodDogTWF0aC5jZWlsKGhlaWdodCksXG5cdH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0Y3JlYXRlSW5maW5pdGVDb21wdXRlcixcblx0cmVjb21wdXRlQXBlcnR1cmVTdGF0ZUZyb21PcHRpb25zQW5kU2Nyb2xsVG9wLFxuICBnZW5lcmF0ZUluZmluaXRlUHJvcHMsXG5cdGJ1aWxkSGVpZ2h0U3R5bGUsXG59O1xuIl19