'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constantInfiniteComputer = require('../computers/constantInfiniteComputer.js');

var _constantInfiniteComputer2 = _interopRequireDefault(_constantInfiniteComputer);

var _scaleEnum = require('./scaleEnum');

var _scaleEnum2 = _interopRequireDefault(_scaleEnum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function createInfiniteComputer(elementHeight, data) {
	var computer = void 0;
	var dataLength = data.length;

	// This should be guaranteed by checkProps
	computer = new _constantInfiniteComputer2.default(elementHeight, dataLength);

	return computer;
}

// Given the scrollTop of the container, computes the state the
// component should be in. The goal is to abstract all of this
// from any actual representation in the DOM.
// The window is the block with any preloadAdditionalHeight
// added to it.
function recomputeApertureStateFromOptionsAndScrollTop(_ref, scrollTop) {
	var preloadBatchSize = _ref.preloadBatchSize,
	    preloadAdditionalHeight = _ref.preloadAdditionalHeight,
	    infiniteComputer = _ref.infiniteComputer;

	var blockNumber = preloadBatchSize === 0 ? 0 : Math.floor(scrollTop / preloadBatchSize),
	    blockStart = preloadBatchSize * blockNumber,
	    blockEnd = blockStart + preloadBatchSize,
	    apertureTop = Math.max(0, blockStart - preloadAdditionalHeight),
	    apertureBottom = Math.min(infiniteComputer.getTotalScrollableHeight(), blockEnd + preloadAdditionalHeight);

	return {
		displayIndexStart: infiniteComputer.getDisplayIndexStart(apertureTop),
		displayIndexEnd: infiniteComputer.getDisplayIndexEnd(apertureBottom)
	};
}

function generateComputedProps(props) {
	// These are extracted so their type definitions do not conflict.
	var containerHeight = props.containerHeight,
	    oldProps = _objectWithoutProperties(props, ['containerHeight']);

	var newProps = {};
	newProps.containerHeight = containerHeight;

	var batchSize = {
		type: _scaleEnum2.default.CONTAINER_HEIGHT_SCALE_FACTOR,
		amount: 0.5
	};

	newProps.preloadBatchSize = newProps.containerHeight * batchSize.amount;

	var additionalHeight = {
		type: _scaleEnum2.default.CONTAINER_HEIGHT_SCALE_FACTOR,
		amount: 1
	};

	newProps.preloadAdditionalHeight = newProps.containerHeight * additionalHeight.amount;

	return Object.assign(oldProps, newProps);
}

function buildHeightStyle(height) {
	return {
		width: '100%',
		height: Math.ceil(height)
	};
}

exports.default = {
	createInfiniteComputer: createInfiniteComputer,
	recomputeApertureStateFromOptionsAndScrollTop: recomputeApertureStateFromOptionsAndScrollTop,
	generateComputedProps: generateComputedProps,
	buildHeightStyle: buildHeightStyle
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYXp5TG9hZC91dGlscy9pbmZpbml0ZUhlbHBlcnMuanMiXSwibmFtZXMiOlsiY3JlYXRlSW5maW5pdGVDb21wdXRlciIsImVsZW1lbnRIZWlnaHQiLCJkYXRhIiwiY29tcHV0ZXIiLCJkYXRhTGVuZ3RoIiwibGVuZ3RoIiwicmVjb21wdXRlQXBlcnR1cmVTdGF0ZUZyb21PcHRpb25zQW5kU2Nyb2xsVG9wIiwic2Nyb2xsVG9wIiwicHJlbG9hZEJhdGNoU2l6ZSIsInByZWxvYWRBZGRpdGlvbmFsSGVpZ2h0IiwiaW5maW5pdGVDb21wdXRlciIsImJsb2NrTnVtYmVyIiwiTWF0aCIsImZsb29yIiwiYmxvY2tTdGFydCIsImJsb2NrRW5kIiwiYXBlcnR1cmVUb3AiLCJtYXgiLCJhcGVydHVyZUJvdHRvbSIsIm1pbiIsImdldFRvdGFsU2Nyb2xsYWJsZUhlaWdodCIsImRpc3BsYXlJbmRleFN0YXJ0IiwiZ2V0RGlzcGxheUluZGV4U3RhcnQiLCJkaXNwbGF5SW5kZXhFbmQiLCJnZXREaXNwbGF5SW5kZXhFbmQiLCJnZW5lcmF0ZUNvbXB1dGVkUHJvcHMiLCJwcm9wcyIsImNvbnRhaW5lckhlaWdodCIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJiYXRjaFNpemUiLCJ0eXBlIiwiQ09OVEFJTkVSX0hFSUdIVF9TQ0FMRV9GQUNUT1IiLCJhbW91bnQiLCJhZGRpdGlvbmFsSGVpZ2h0IiwiT2JqZWN0IiwiYXNzaWduIiwiYnVpbGRIZWlnaHRTdHlsZSIsImhlaWdodCIsIndpZHRoIiwiY2VpbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLFNBQVNBLHNCQUFULENBQWdDQyxhQUFoQyxFQUErQ0MsSUFBL0MsRUFBcUQ7QUFDcEQsS0FBSUMsaUJBQUo7QUFDQSxLQUFNQyxhQUFhRixLQUFLRyxNQUF4Qjs7QUFFQTtBQUNBRixZQUFXLHVDQUE2QkYsYUFBN0IsRUFBNENHLFVBQTVDLENBQVg7O0FBRUEsUUFBT0QsUUFBUDtBQUNBOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyw2Q0FBVCxPQUVDQyxTQUZELEVBR0U7QUFBQSxLQUZDQyxnQkFFRCxRQUZDQSxnQkFFRDtBQUFBLEtBRm1CQyx1QkFFbkIsUUFGbUJBLHVCQUVuQjtBQUFBLEtBRjRDQyxnQkFFNUMsUUFGNENBLGdCQUU1Qzs7QUFDRCxLQUFJQyxjQUFjSCxxQkFBcUIsQ0FBckIsR0FBeUIsQ0FBekIsR0FBNkJJLEtBQUtDLEtBQUwsQ0FBV04sWUFBWUMsZ0JBQXZCLENBQS9DO0FBQUEsS0FDQ00sYUFBYU4sbUJBQW1CRyxXQURqQztBQUFBLEtBRUNJLFdBQVdELGFBQWFOLGdCQUZ6QjtBQUFBLEtBR0NRLGNBQWNKLEtBQUtLLEdBQUwsQ0FBUyxDQUFULEVBQVlILGFBQWFMLHVCQUF6QixDQUhmO0FBQUEsS0FJQ1MsaUJBQWlCTixLQUFLTyxHQUFMLENBQVNULGlCQUFpQlUsd0JBQWpCLEVBQVQsRUFBc0RMLFdBQVdOLHVCQUFqRSxDQUpsQjs7QUFNQSxRQUFPO0FBQ05ZLHFCQUFtQlgsaUJBQWlCWSxvQkFBakIsQ0FBc0NOLFdBQXRDLENBRGI7QUFFTk8sbUJBQWlCYixpQkFBaUJjLGtCQUFqQixDQUFvQ04sY0FBcEM7QUFGWCxFQUFQO0FBSUE7O0FBRUQsU0FBU08scUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDO0FBQ3JDO0FBRHFDLEtBR3BDQyxlQUhvQyxHQUtqQ0QsS0FMaUMsQ0FHcENDLGVBSG9DO0FBQUEsS0FJakNDLFFBSmlDLDRCQUtqQ0YsS0FMaUM7O0FBT3JDLEtBQUlHLFdBQVcsRUFBZjtBQUNBQSxVQUFTRixlQUFULEdBQTJCQSxlQUEzQjs7QUFFQSxLQUFJRyxZQUFZO0FBQ2ZDLFFBQU0sb0JBQVVDLDZCQUREO0FBRWZDLFVBQVE7QUFGTyxFQUFoQjs7QUFLQUosVUFBU3JCLGdCQUFULEdBQTRCcUIsU0FBU0YsZUFBVCxHQUEyQkcsVUFBVUcsTUFBakU7O0FBRUEsS0FBSUMsbUJBQW1CO0FBQ3RCSCxRQUFNLG9CQUFVQyw2QkFETTtBQUV0QkMsVUFBUTtBQUZjLEVBQXZCOztBQUtBSixVQUFTcEIsdUJBQVQsR0FBbUNvQixTQUFTRixlQUFULEdBQTJCTyxpQkFBaUJELE1BQS9FOztBQUVBLFFBQU9FLE9BQU9DLE1BQVAsQ0FBY1IsUUFBZCxFQUF3QkMsUUFBeEIsQ0FBUDtBQUNBOztBQUVELFNBQVNRLGdCQUFULENBQTBCQyxNQUExQixFQUFrQztBQUNqQyxRQUFPO0FBQ05DLFNBQU8sTUFERDtBQUVORCxVQUFRMUIsS0FBSzRCLElBQUwsQ0FBVUYsTUFBVjtBQUZGLEVBQVA7QUFJQTs7a0JBRWM7QUFDZHRDLCtDQURjO0FBRWRNLDZGQUZjO0FBR2RtQiw2Q0FIYztBQUlkWTtBQUpjLEMiLCJmaWxlIjoiaW5maW5pdGVIZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDb25zdGFudEluZmluaXRlQ29tcHV0ZXIgZnJvbSAnLi4vY29tcHV0ZXJzL2NvbnN0YW50SW5maW5pdGVDb21wdXRlci5qcyc7XG5pbXBvcnQgc2NhbGVFbnVtIGZyb20gJy4vc2NhbGVFbnVtJztcblxuZnVuY3Rpb24gY3JlYXRlSW5maW5pdGVDb21wdXRlcihlbGVtZW50SGVpZ2h0LCBkYXRhKSB7XG5cdGxldCBjb21wdXRlcjtcblx0Y29uc3QgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG5cdC8vIFRoaXMgc2hvdWxkIGJlIGd1YXJhbnRlZWQgYnkgY2hlY2tQcm9wc1xuXHRjb21wdXRlciA9IG5ldyBDb25zdGFudEluZmluaXRlQ29tcHV0ZXIoZWxlbWVudEhlaWdodCwgZGF0YUxlbmd0aCk7XG5cblx0cmV0dXJuIGNvbXB1dGVyO1xufVxuXG4vLyBHaXZlbiB0aGUgc2Nyb2xsVG9wIG9mIHRoZSBjb250YWluZXIsIGNvbXB1dGVzIHRoZSBzdGF0ZSB0aGVcbi8vIGNvbXBvbmVudCBzaG91bGQgYmUgaW4uIFRoZSBnb2FsIGlzIHRvIGFic3RyYWN0IGFsbCBvZiB0aGlzXG4vLyBmcm9tIGFueSBhY3R1YWwgcmVwcmVzZW50YXRpb24gaW4gdGhlIERPTS5cbi8vIFRoZSB3aW5kb3cgaXMgdGhlIGJsb2NrIHdpdGggYW55IHByZWxvYWRBZGRpdGlvbmFsSGVpZ2h0XG4vLyBhZGRlZCB0byBpdC5cbmZ1bmN0aW9uIHJlY29tcHV0ZUFwZXJ0dXJlU3RhdGVGcm9tT3B0aW9uc0FuZFNjcm9sbFRvcChcblx0eyBwcmVsb2FkQmF0Y2hTaXplLCBwcmVsb2FkQWRkaXRpb25hbEhlaWdodCwgaW5maW5pdGVDb21wdXRlciB9LFxuXHRzY3JvbGxUb3AsXG4pIHtcblx0bGV0IGJsb2NrTnVtYmVyID0gcHJlbG9hZEJhdGNoU2l6ZSA9PT0gMCA/IDAgOiBNYXRoLmZsb29yKHNjcm9sbFRvcCAvIHByZWxvYWRCYXRjaFNpemUpLFxuXHRcdGJsb2NrU3RhcnQgPSBwcmVsb2FkQmF0Y2hTaXplICogYmxvY2tOdW1iZXIsXG5cdFx0YmxvY2tFbmQgPSBibG9ja1N0YXJ0ICsgcHJlbG9hZEJhdGNoU2l6ZSxcblx0XHRhcGVydHVyZVRvcCA9IE1hdGgubWF4KDAsIGJsb2NrU3RhcnQgLSBwcmVsb2FkQWRkaXRpb25hbEhlaWdodCksXG5cdFx0YXBlcnR1cmVCb3R0b20gPSBNYXRoLm1pbihpbmZpbml0ZUNvbXB1dGVyLmdldFRvdGFsU2Nyb2xsYWJsZUhlaWdodCgpLCBibG9ja0VuZCArIHByZWxvYWRBZGRpdGlvbmFsSGVpZ2h0KTtcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3BsYXlJbmRleFN0YXJ0OiBpbmZpbml0ZUNvbXB1dGVyLmdldERpc3BsYXlJbmRleFN0YXJ0KGFwZXJ0dXJlVG9wKSxcblx0XHRkaXNwbGF5SW5kZXhFbmQ6IGluZmluaXRlQ29tcHV0ZXIuZ2V0RGlzcGxheUluZGV4RW5kKGFwZXJ0dXJlQm90dG9tKSxcblx0fTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDb21wdXRlZFByb3BzKHByb3BzKSB7XG5cdC8vIFRoZXNlIGFyZSBleHRyYWN0ZWQgc28gdGhlaXIgdHlwZSBkZWZpbml0aW9ucyBkbyBub3QgY29uZmxpY3QuXG5cdGxldCB7XG5cdFx0Y29udGFpbmVySGVpZ2h0LFxuXHRcdC4uLm9sZFByb3BzXG5cdH0gPSBwcm9wcztcblxuXHRsZXQgbmV3UHJvcHMgPSB7fTtcblx0bmV3UHJvcHMuY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0O1xuXG5cdGxldCBiYXRjaFNpemUgPSB7XG5cdFx0dHlwZTogc2NhbGVFbnVtLkNPTlRBSU5FUl9IRUlHSFRfU0NBTEVfRkFDVE9SLFxuXHRcdGFtb3VudDogMC41LFxuXHR9O1xuXG5cdG5ld1Byb3BzLnByZWxvYWRCYXRjaFNpemUgPSBuZXdQcm9wcy5jb250YWluZXJIZWlnaHQgKiBiYXRjaFNpemUuYW1vdW50O1xuXG5cdGxldCBhZGRpdGlvbmFsSGVpZ2h0ID0ge1xuXHRcdHR5cGU6IHNjYWxlRW51bS5DT05UQUlORVJfSEVJR0hUX1NDQUxFX0ZBQ1RPUixcblx0XHRhbW91bnQ6IDEsXG5cdH07XG5cblx0bmV3UHJvcHMucHJlbG9hZEFkZGl0aW9uYWxIZWlnaHQgPSBuZXdQcm9wcy5jb250YWluZXJIZWlnaHQgKiBhZGRpdGlvbmFsSGVpZ2h0LmFtb3VudDtcblxuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihvbGRQcm9wcywgbmV3UHJvcHMpO1xufVxuXG5mdW5jdGlvbiBidWlsZEhlaWdodFN0eWxlKGhlaWdodCkge1xuXHRyZXR1cm4ge1xuXHRcdHdpZHRoOiAnMTAwJScsXG5cdFx0aGVpZ2h0OiBNYXRoLmNlaWwoaGVpZ2h0KSxcblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXHRjcmVhdGVJbmZpbml0ZUNvbXB1dGVyLFxuXHRyZWNvbXB1dGVBcGVydHVyZVN0YXRlRnJvbU9wdGlvbnNBbmRTY3JvbGxUb3AsXG5cdGdlbmVyYXRlQ29tcHV0ZWRQcm9wcyxcblx0YnVpbGRIZWlnaHRTdHlsZSxcbn07XG4iXX0=